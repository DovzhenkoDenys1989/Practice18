package com.company;

public class ArrayExceptionTest {

    public static void main(String[] args) {
        int[] Array = new int[]{1, 2, 3, 4, 5};

        printArray(Array, 1, 8);
    }

    public static void printArray(int[] array, int start, int end) {
        int i = 0;
        try {
            for (i = start; i <= end; i++) {
                System.out.println(array[i]);
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println("Ошибка. Попытка обращения к несуществующему индексу: текущий индекс = " + i + " размер массива = " + array.length);
        }
    }
}

//        1. Обработать непроверяемое исключение ArrayIndexOutOfBoundsException.
//        • Создать класс ArrayExceptionTest
//        • Создать main метод
//        • Создать и проинициализировать произвольный массив из 5-6 элементов.
//        • Создать статический метод printArray(array, start, end), который выводит на
//        экран элементы массива от индекса start до индекса end.
//        • Добавить обработку исключения ArrayIndexOutOfBoundsException, для
//        операции получения элемента массива по индексу. При возникновении ошибки
//        выводить на экран сообщение вид: «Ошибка. Попытка обращения к
//        несуществующему индексу: текущий индекс = i; размер массива = s;»
//        • Вызвать несколько раз (с разными значениями) метод printArray в методе main
//        для созданного ранее массива.
//        2. Использование throw
//        • Создать класс MoneyTransactionUtil
//        • Создать приватный конструктор.
//        • Создать статический метод для отправки денег с одного счета на другой:
//        sendTo(номерКарты, номерКарты, сумма).
//        • В методе следует обработать несколько возможных исключительных ситуаций:
//        • Если номер карты отправителя и карты получателя совпадают, нужно
//        выбросить RuntimeException. (throw new RuntimeException())
//        • Если сумма является нулевой, отрицательной или больше 100_000,
//        нужно выбросить RuntimeException. (throw new RuntimeException())
//        • Добавить ключевое слово throws и RuntimeException к объявлению метода.
//        • Если исключительных ситуаций нет, вывести на экран: «Сумма s, со счета n
//        успешно переведена на счет m»
//        • Создать класс UserBank методом main.
//        • В методе main вызвать метод sendTo.
//        • Обернуть вызов метода блоком try…catch
//        • В блоке catch для RuntimeException вывести сообщение: «При обработке
//        транзакции банка произошла ошибка»
//        3. Создание собственных исключений
//        • Создать класс AccountException
//        • Отнаследовать класс AccountException от RuntimeException
//        • Создать класс MoneyValueExeption
//        • Отнаследовать класс MoneyValueExeption от RuntimeException
//        • В методе MoneyTransactionUtil.sendTo(…) сделать правки:
//        • Если номер карты отправителя и карты получателя совпадают, нужно
//        выбросить AccountException. (throw new AccountException ())
//        • Если сумма является нулевой, отрицательной или больше 100_000,
//        нужно выбросить MoneyValueExeption.
//        • Заменить для throws класс RuntimeException на новые исключения
//        • Проверить отсутствие ошибки в классе UserBank. Т к оба исключения имеют
//        общего предка RuntimeException, они будут обрабатываться без ошибок.
//        • Заменить один catch блок с RuntimeException на два: AccountException и
//        MoneyValueExeption соответственно.
//        • При AccountException вывести на экран текст: «Ошибка с реквизитами банка.
//        Возможно, номер карты отправителя и получателя совпадают.»
//        • При MoneyValueExeption вывести на экран текст: «Ошибка с суммой отправки.
//        Сумма должна быть больше 0. Сумма не должна превышать лимит в 100 000».
//        4. Проверить работу Java Error.
//        • Создать класс StackOverFlowTest
//        • Создать статическое поле int count
//        • Создать статический метод test(), в котором инкрементируется число count,
//        выводится его значение на экран и снова вызывается test(). (Рекурсия)
//        • Убедится в наличии ошибки при запуске программы.
//        • Попробовать обернуть содержимое метода в блок try…catch




